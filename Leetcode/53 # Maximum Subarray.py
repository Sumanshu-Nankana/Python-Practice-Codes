# https://leetcode.com/problems/maximum-subarray/submissions/

# Method-1
# Find Sum of all subsets.
# and store max_sum
# Time Limit Exceed Error for Large inputs
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        length = len(nums)
        max_sum = -9999999999
        for i in range(length):
            curr_sum = 0
            for j in range(i, length):
                curr_sum = curr_sum + nums[j]
                if curr_sum > max_sum:
                    max_sum = curr_sum
        return max_sum
    
# Method-2
# Run a Single Loop
# Add next element only when ; if by adding next element - it's giving SUM > that element
# Else, start from that element itself (because that element is max-sum).

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = float("-inf")
        curr_sum = float("-inf")
        for i in nums:
            # check if adding next element will give SUM > that element
            # then add
            if (i + curr_sum > i):
                curr_sum = i + curr_sum
            # else, current_sum will be that element.
            else:
                curr_sum = i
            max_sum = max(max_sum, curr_sum)
        return max_sum
        
        
# Method-3
# Same as method-2 - but with little modification and increase the speed a  little bit
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = float("-inf")
        curr_sum = float("-inf")
        for i in nums:
            # directly assign curr_sum (max of current element or element generated by adding current element)
            curr_sum = max(i+curr_sum, i)
            max_sum = max(max_sum, curr_sum)
        return max_sum